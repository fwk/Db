<?php

namespace Fwk\Db;

/**
 * Test class for Table.
 * Generated by PHPUnit on 2012-05-27 at 15:10:12.
 */
class TableTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Table
     */
    protected $object;

    /**
     *
     * @var Connection
     */
    protected $connection;

    public function __construct()
    {
        $this->connection = new Connection(array(
            'memory'    => true,
            'driver'    => 'pdo_sqlite'
        ));
        
        $schema = $this->connection->getSchema();
        
        $myTable = $schema->createTable("test_table");
        $myTable->addColumn("id", "integer", array("unsigned" => true));
        $myTable->addColumn("username", "string", array("length" => 32));
        $myTable->setPrimaryKey(array("id"));
        $myTable->addUniqueIndex(array("username"));
    }
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Table('test_table');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     */
    public function testGetColumnsFail()
    {
        $this->setExpectedException('Fwk\Db\Exception');
        $this->assertEquals(2, count($this->object->getColumns()));
    }

    /**
     */
    public function testGetColumns()
    {
        $this->object->setConnection($this->connection);
        $this->assertEquals(2, count($this->object->getColumns()));
    }
    
    /**
     */
    public function testSetConnection()
    {
        $this->assertEquals($this->object, $this->object->setConnection($this->connection));
    }

    /**
     */
    public function testGetConnectionFail()
    {
        $this->setExpectedException("\Fwk\Db\Exception");
        $this->object->getConnection();
    }

    /**
     */
    public function testGetConnection()
    {
        $this->object->setConnection($this->connection);
        $this->assertEquals($this->connection, $this->object->getConnection());
    }

    public function testGetFinder()
    {
        $this->assertInstanceOf('\Fwk\Db\Finder', $this->object->finder());
    }

    /**
     */
    public function testGetName()
    {
        $this->assertEquals('test_table', $this->object->getName());
    }

    public function testGetIdentifiersKeys()
    {
        $this->object->setConnection($this->connection);
        $this->assertEquals(array('id'), $this->object->getIdentifiersKeys());
    }

    /**
     */
    public function testGetRegistry()
    {
        $this->assertInstanceOf('\Fwk\Db\Registry', $this->object->getRegistry());
    }

    /**
     */
    public function testGetColumnFail()
    {
        $this->object->setConnection($this->connection);
        $this->setExpectedException('\Fwk\Db\Exceptions\TableColumnNotFound');
        $this->object->getColumn('test');
    }

    public function testGetColumn()
    {
        $this->object->setConnection($this->connection);
        $this->assertInstanceOf('\Doctrine\DBAL\Schema\Column', $this->object->getColumn('username'));
    }

    /**
     */
    public function testHasColumn()
    {
        $this->object->setConnection($this->connection);
        $this->assertFalse($this->object->hasColumn('test'));
        $this->assertTrue($this->object->hasColumn('username'));
    }

    /**
     */
    public function testDefaultEntity()
    {
        $this->object->setConnection($this->connection);
        $this->assertEquals('\stdClass', $this->object->getDefaultEntity());
        $this->object->setDefaultEntity('\MyTestEntity');
        $this->assertEquals('\MyTestEntity', $this->object->getDefaultEntity());
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testSave().
     */
    public function testSave()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testDelete().
     */
    public function testDelete()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testDeleteAll().
     */
    public function testDeleteAll()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
